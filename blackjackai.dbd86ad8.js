let table={different:{17:{2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,1:0},18:{2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,1:0},19:{2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,1:0},20:{2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,1:0},21:{2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,1:0},13:{2:0,3:0,4:0,5:0,6:0,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},14:{2:0,3:0,4:0,5:0,6:0,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},15:{2:0,3:0,4:0,5:0,6:0,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},16:{2:0,3:0,4:0,5:0,6:0,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},12:{2:1,3:1,4:0,5:0,6:0,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},11:{2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,1:1},10:{2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:1,11:1,12:1,13:1,1:1},9:{2:1,3:2,4:2,5:2,6:1,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},5:{2:1,3:1,4:1,5:1,6:1,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},6:{2:1,3:1,4:1,5:1,6:1,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},7:{2:1,3:1,4:1,5:1,6:1,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},8:{2:1,3:1,4:1,5:1,6:1,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1}},as:{8:{2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,1:0},9:{2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,1:0},10:{2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,1:0},7:{2:0,3:2,4:2,5:2,6:2,7:0,8:0,9:1,10:1,11:1,12:1,13:1,1:1},6:{2:1,3:2,4:2,5:2,6:2,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},4:{2:1,3:1,4:2,5:2,6:2,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},5:{2:1,3:1,4:2,5:2,6:2,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},2:{2:1,3:1,4:1,5:2,6:2,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},3:{2:1,3:1,4:1,5:2,6:2,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1}},pair:{1:{2:3,3:3,4:3,5:3,6:3,7:3,8:3,9:3,10:3,11:3,12:3,13:3,1:3},10:{2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,1:0},11:{2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,1:0},12:{2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,1:0},13:{2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,1:0},9:{2:3,3:3,4:3,5:3,6:3,7:0,8:3,9:3,10:0,11:0,12:0,13:0,1:0},8:{2:3,3:3,4:3,5:3,6:3,7:3,8:3,9:3,10:3,11:3,12:3,13:3,1:3},7:{2:3,3:3,4:3,5:3,6:3,7:3,8:1,9:1,10:1,11:1,12:1,13:1,1:1},6:{2:3,3:3,4:3,5:3,6:3,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},5:{2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:1,11:1,12:1,13:1,1:1},4:{2:1,3:1,4:1,5:3,6:3,7:1,8:1,9:1,10:1,11:1,12:1,13:1,1:1},3:{2:3,3:3,4:3,5:3,6:3,7:3,8:1,9:1,10:1,11:1,12:1,13:1,1:1},2:{2:3,3:3,4:3,5:3,6:3,7:3,8:1,9:1,10:1,11:1,12:1,13:1,1:1}}},cards={1:{name:"as",value:[1,11]},2:{name:"2",value:[2]},3:{name:"2",value:[3]},4:{name:"2",value:[4]},5:{name:"2",value:[5]},6:{name:"2",value:[6]},7:{name:"2",value:[7]},8:{name:"2",value:[8]},9:{name:"2",value:[9]},10:{name:"2",value:[10]},11:{name:"2",value:[10]},12:{name:"2",value:[10]},13:{name:"2",value:[10]}},actions={0:"Stop",1:"Take",2:"Double",3:"Sepair"};class Game{constructor(e=null,t=null,a=null){this.player=null!=t?t:this.getRandomCards(2),this.dealer=null!=a?a:this.getRandomCards(1),this.player_deck2=null,this.dealer_value=this.getCount([this.dealer[0]]),this.player_value=this.getCount(this.player),this.bet=e,this.bet2=e.valueOf()}getActionFromTable(e,t){if(2!=e.length)return table.different[t.toString()][this.dealer_value.toString()];if(e[0]==e[1])return table.pair[e[0].toString()][this.dealer_value.toString()];if(1!=e[0]&&1!=e[1]||e[0]==e[1])return table.different[t.toString()][this.dealer_value.toString()];{let t=+(1==e[0]);return table.as[cards[e[t]].value[0].toString()][this.dealer_value.toString()]}}isBlackjack(e){return 21==this.getCount([e[0],e[1]])}getCount(e){var t=0;for(let a of e)1!=a&&(t+=cards[a].value[0]);for(let a of e)1==a&&(t+cards[a].value[1]<=21?t+=cards[a].value[1]:t+=cards[a].value[0]);return t}getRandomCards(e){let t=[];for(let a=0;a<e;a++)t.push(this.randomIntFromInterval(1,13));return t}randomIntFromInterval(e,t){return Math.floor(Math.random()*(t-e+1)+e)}take(){let e=this.randomIntFromInterval(1,13);this.player.push(e),this.player_value=this.getCount(this.player)}takeDeck2(){let e=this.randomIntFromInterval(1,13);this.player_deck2.push(e),this.player_deck2_value=this.getCount(this.player_deck2)}doDealer(){for(this.dealer_value=this.getCount(this.dealer);this.dealer_value<17;){let e=this.randomIntFromInterval(1,13);this.dealer.push(e),this.dealer_value=this.getCount(this.dealer)}}winner(e,t,a){let l=this.isBlackjack(e),r=this.isBlackjack(this.dealer);return t>21?-a:this.dealer_value>21?a:t<this.dealer_value||!l&&r?-a:l&&r||t==this.dealer_value?0:l&&!r?1.5*a:t>this.dealer_value?a:void 0}stop(){return(this.doDealer(),this.bet=this.winner(this.player,this.player_value,this.bet),null!=this.player_deck2)?(this.bet2=this.winner(this.player_deck2,this.player_deck2_value,this.bet2),this.bet2=this.bet2>0?this.bet2:0,this.bet+this.bet2):this.bet}play(){for(var e=this.getActionFromTable(this.player,this.player_value);this.player_value<=21&&0!=e;){if(1==e)this.take();else if(2==e){this.bet=2*this.bet,this.take();break}else if(0==e)break;else 3==e&&null==this.player_deck2&&(this.player=[this.player[0],this.randomIntFromInterval(1,13)],this.player_deck2=[this.player[0],this.randomIntFromInterval(1,13)],this.player_deck2_value=this.getCount(this.player_deck2),this.take());if(this.player_value<=21)e=this.getActionFromTable(this.player,this.player_value);else break}if(null!=this.player_deck2)for(var e=this.getActionFromTable(this.player_deck2,this.player_deck2_value);this.player_deck2_value<=21&&0!=e;){if(1==e)this.takeDeck2();else if(2==e){this.bet2=2*this.bet2,this.takeDeck2();break}else if(0==e)break;else 3==e&&this.takeDeck2();if(this.player_deck2_value<=21)e=this.getActionFromTable(this.player_deck2,this.player_deck2_value);else break}return this.stop()}}
//# sourceMappingURL=blackjackai.dbd86ad8.js.map
